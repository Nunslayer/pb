// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: property.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PropertyServiceClient is the client API for PropertyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PropertyServiceClient interface {
	CheckPropertys(ctx context.Context, in *CheckPropertysRequest, opts ...grpc.CallOption) (*CheckPropertysResponse, error)
	GetPropertys(ctx context.Context, in *GetPropertysRequest, opts ...grpc.CallOption) (*Propertys, error)
}

type propertyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPropertyServiceClient(cc grpc.ClientConnInterface) PropertyServiceClient {
	return &propertyServiceClient{cc}
}

func (c *propertyServiceClient) CheckPropertys(ctx context.Context, in *CheckPropertysRequest, opts ...grpc.CallOption) (*CheckPropertysResponse, error) {
	out := new(CheckPropertysResponse)
	err := c.cc.Invoke(ctx, "/property.PropertyService/CheckPropertys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *propertyServiceClient) GetPropertys(ctx context.Context, in *GetPropertysRequest, opts ...grpc.CallOption) (*Propertys, error) {
	out := new(Propertys)
	err := c.cc.Invoke(ctx, "/property.PropertyService/GetPropertys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PropertyServiceServer is the server API for PropertyService service.
// All implementations should embed UnimplementedPropertyServiceServer
// for forward compatibility
type PropertyServiceServer interface {
	CheckPropertys(context.Context, *CheckPropertysRequest) (*CheckPropertysResponse, error)
	GetPropertys(context.Context, *GetPropertysRequest) (*Propertys, error)
}

// UnimplementedPropertyServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPropertyServiceServer struct {
}

func (UnimplementedPropertyServiceServer) CheckPropertys(context.Context, *CheckPropertysRequest) (*CheckPropertysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPropertys not implemented")
}
func (UnimplementedPropertyServiceServer) GetPropertys(context.Context, *GetPropertysRequest) (*Propertys, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPropertys not implemented")
}

// UnsafePropertyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PropertyServiceServer will
// result in compilation errors.
type UnsafePropertyServiceServer interface {
	mustEmbedUnimplementedPropertyServiceServer()
}

func RegisterPropertyServiceServer(s grpc.ServiceRegistrar, srv PropertyServiceServer) {
	s.RegisterService(&PropertyService_ServiceDesc, srv)
}

func _PropertyService_CheckPropertys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckPropertysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropertyServiceServer).CheckPropertys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/property.PropertyService/CheckPropertys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropertyServiceServer).CheckPropertys(ctx, req.(*CheckPropertysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PropertyService_GetPropertys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPropertysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropertyServiceServer).GetPropertys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/property.PropertyService/GetPropertys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropertyServiceServer).GetPropertys(ctx, req.(*GetPropertysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PropertyService_ServiceDesc is the grpc.ServiceDesc for PropertyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PropertyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "property.PropertyService",
	HandlerType: (*PropertyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckPropertys",
			Handler:    _PropertyService_CheckPropertys_Handler,
		},
		{
			MethodName: "GetPropertys",
			Handler:    _PropertyService_GetPropertys_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "property.proto",
}
